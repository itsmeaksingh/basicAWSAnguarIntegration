AWSTemplateFormatVersion: "2010-09-09"
Description: sam-app CRUD APP
Transform:
  - AWS::Serverless-2016-10-31
Parameters:
  Environment:
    Type: String
    Default: dev
    Description: This is only used to name resources
    AllowedValues:
      - dev
      - develop
      - stage
      - prod
  TableName:
    Type: String
    Description: DynamoDb Table Name
  LambdaRoleArn:
    Type: String
    Description: Lambda Role with basic execution policy.
Mappings:
  ApiGateway:
    respTempl:
      error: |-
        #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
        {
        "error" :"$errorMessageObj.error"
        }
    reqTempl:
      default: |-
        {
           "body" :$input.json('$'),
           "headers":{
               #foreach($header in $input.params().header.keySet())
                   "$header":"$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end
               #end
           },
           "method":"$context.httpMethod",
           "path":"$context.path",
           "params":{
               #foreach($param in $input.params().path.keySet())
                   "$param":"$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
               #end
           },
           "query":{
               #foreach($queryParam in $input.params().querystring.keySet())
                   "$queryParam":"$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end
               #end
           }
        }
    head:
      integr: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
  Version:
    v:
      v: 0.0.1
    deployment:
      folder: 0.0.1
  Env:
    UpperCase:
      develop: Develop
      dev: Dev
      stage: Stage
      prod: Prod
  Lambdas:
    getAllUsersServices:
      version: 1.0.0
      name: get-all-users
Resources:
  basicApiNew:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub
        - Basic Custom Resources - ${Param1}
        - Param1: !FindInMap
            - Env
            - UpperCase
            - !Ref Environment
      Description: API used for Custom requests
      FailOnWarnings: true
  getAllUsersServicesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      FunctionName: !Sub
        - ${FunctionName}
        - FunctionName: !FindInMap
            - Lambdas
            - getAllUsersServices
            - name
      Role: !Ref LambdaRoleArn
      CodeUri: !Sub
        - handlers/${FunctionName}/
        - FunctionName: !FindInMap
            - Lambdas
            - getAllUsersServices
            - name
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref SampleTable
  getAllUsersServicesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref basicApiNew
      ParentId: !GetAtt basicApiNew.RootResourceId
      PathPart: getUsers
    DependsOn:
      - basicApiNew
  getAllUsersServicesResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: !FindInMap
                - ApiGateway
                - head
                - integr
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      ResourceId: !Ref getAllUsersServicesResource
      RestApiId: !Ref basicApiNew
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty
  getAllUsersServicesResourceGetMethod:
    Type: AWS::ApiGateway::Method
    Metadata:
      Path: /getUsers
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllUsersServicesLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: "-"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: 400
            SelectionPattern: .*"status":400.*
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: !FindInMap [ApiGateway, respTempl, error]
          - StatusCode: 500
            SelectionPattern: (\n|.)+
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: !Sub '{"error" : "Process exited before completing request."}'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: !FindInMap [ApiGateway, reqTempl, default]
      ResourceId: !Ref "getAllUsersServicesResource"
      RestApiId: !Ref "basicApiNew"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 500
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
    DependsOn: getAllUsersServicesPermissions
  getAllUsersServicesPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt getAllUsersServicesLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${basicApiNew}/*/*/*
  SampleTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Dev stage
    Value: !Sub https://${basicApiNew}.execute-api.${AWS::Region}.amazonaws.com/Dev/
